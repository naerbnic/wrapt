Wrapt -- a cross language binary graph file format
==================================================

There are dozens of data-language formats right now being used to
support data driven programs, such as XML and JSON. These formats are usually
satisfactory for small sets of configuration data, however they are not
designed to manage large amounts of data for several reasons:

- To extract the data, the entire file must be read from disk and parsed.
- The data normally lives entirely in memory, having no inherent backing.
- Most formats provide a tree-based data model, where many in-process data
  structures are better represented in a graph format.

To accomodate large graph data files, Wrapt was defined to fit this niche.

Advantages
- Easily store complicated structure in a space-efficient manner
- Allow for mutability by file overlay
- Allows for external tools for repacking and manipulation, for easy patching

File Format
===========
Types used:
- uint8_t, uint16_t, uint32_t, uint64. All integers are written in network byte order.
- wchar_t
- Ref (4 byte index offset) or Ref<Type> if a particular type is required

Limitations
- Allow 2^31 entries in a file.
- Entries can be up to 2^48 bytes large
- String table is max of 2^31 bytes
- In an overlay file, an average entry takes about 20 bytes + block size (usually takes 8 bytes)

HEADER
======

Format:
- uint64 magic_number 
  - Literal sequence of 8 bytes in order (regardless of platform) "WraptDat"
- uint64 string_table_offset
  - The file offset of the string table
- uint64 data_offset 
  - Offset to the data section.
- Index index
  - The file index.

INDEX
=====

Since we want to be able to layer files, we create a run length encoded meta index. This means
that searching for replaced elements is as efficient as a binary search, but for new elements
with contiguous ranges is just a simple index lookup.

Format:
- uint32 metaindex_size
  - The number of entries in the metaindex
- uint32 index_size
  - The number of entries in the index
- MetaIndexEntry[metaindex_size] metaindex
  - Meta index entries, in order of increasing ranges. Ranges may not overlap,
    although they may have holes in between them. This index may be binary
    searched in order to find the correct range for an entry.
- IndexEntry[index_size] index
  - Index entries. Offsets for data are defined by the meta index.

METAINDEX ENTRY
===============

Format
------

- uint32 range_start
  - The first index id this range accepts. Thus this accepts
    [range_start, range_start + range_size)
- uint32 index_offset
  - The offset into the index entries where this range begins. This region thus has
    entry offsets [index_offset, index_offset + range_size)
- uint32 range_size
  - The size of this range

INDEX ENTRY
===========

Format
------

- uint64 data
64 63                                      0
 +-+---------------------------------------+
 |L| Payload                               |
 +-+---------------------------------------+

if bit L is set, then the payload is interpreted as follows:

64 63  60                                0
 +-+---+---------------------------------+
 |1|Typ| Literal data, or 0              |
 +-+---+---------------------------------+

Possible values of Type include:

000: Null (0)
001: Integer (sign extended)
010: Exponent limited Double-Precision Float (7 bit exponent)
011: Boolean True (0)
100: Boolean False (0)


Otherwise, it's interpreted as follows:

64 63    48                            3   0
 +-+------+----------------------------+---+
 |0| Size | Data Segment Offset        |Typ|
 +-+------+----------------------------+---+

Note that the offset is not shifted over, but actually masked out of this
uint64. All data must start at an 8 byte file boundary. This leaves the bottom three
bits available for type information.

If Size = 0, then the first 8 bytes of the data block are the size of the remaining block.
Otherwise, it is the number of bytes to be found at the data segment

Possible values of Typ include:

000 : String
001 : Map
010 : Array
011 : Blob
100 : Long Integer
101 : Double-Precision Float

STRING TABLE
============

A string table starts with a uint32 for the table size. The remainder is a
byte-oriented binary object. Strings are represented by byte offsets into the
table (storable as uint32). At a given offset, a string is represented by:

- A variable-length unsigned integer (Max 2GB) size
- size bytes of UTF-8 encoded string data

The string table is sorted in lexographical order, so string tag comparisons can be done by
simple offset comparison.

===========
DATA BLOCKS
===========

Note that all data blocks have a position and a size in the file.

STRING
======

UTF-8 encoded string data.

MAP
======
A map terminates at the block size.

- uint32 type_tag_string_offset
- MapEntry[] entries
  - uint32 field_name_string_offset
  - uint32 index_offset

ARRAY
=======
An array terminates at the block size.

- uint32[] index_offsets

BLOB
=======

- uint32 type_tag_string_offset (?)
- byte[] data

API Definition:
===============

interface WraptFile {
  /** Generically reads the object at index 0 */
  WraptHandle readObject();

  /** 
   * Creates a new anonymous object in the file. Can be used in builders to
   * add new data to the file. Will not be persisted if unreachable from
   * the root object
   */
  WraptHandle createObject();

  /**
   * Writes out the root object to a Wrapt file at the location. This
   * effectively garbage collects the objects unreachable from the root.
   * All live WraptHandles will still be independent and valid (although
   * internal indexes may be modified). Again, objects not reachable from
   * the root will not be persisted until added.
   */
  void write(String path);
}

interface WraptHandle {
  // Methods return the value requested or an
  // approrpiate error condition if not (e.g. an exception or null
  // return value as necessary. Should be highest precision available in
  // this language

  // Reading is lazy, and delayed until one of these methods are called.
  // Initializing a builder invalidates this object, so these methods MAY
  // fail
  int asInt();
  double asDouble();
  boolean asBoolean();
  String asString();
  WraptMap asMap();
  WraptArray asArray();
  boolean isNull();
  byte[] asBlob();

  // Creates a new object that shares this object's reference, replacing it in
  // this file. Can be used even if the object does not yet exist
  WraptHandle createInt(int value);
  WraptHandle createFloat(double value);
  WraptHandle createBool(boolean b);
  WraptHandle createString(String str);
  WraptHandle createNull();
  WraptMapBuilder createMap();
  WraptArrayBuilder createArray();
}

interface WraptMap {
  List<Pair<String, WraptHandle>> getEntries();
  WraptHandle getValue(String str);
  boolean contains(String str);
}

interface WraptArray {
  List<WraptHandle> getElements();
  WraptHandle getElement(int index);
}

interface WraptMapBuilder {
  void put(String name, WraptHandle value);
  WraptHandle build();
}

interface WraptArrayBuilder {
  void add(WraptHandle object);
  WraptHandle build();
}
